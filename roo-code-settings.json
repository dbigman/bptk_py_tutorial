{"providerProfiles":{"currentApiConfigName":"gtp-5-mini","apiConfigs":{"Deepseek":{"modelTemperature":1,"enableReasoningEffort":true,"apiModelId":"deepseek-reasoner","deepSeekApiKey":"sk-438a1a4e217e4538ac8da14a298a4ec9","apiProvider":"deepseek","id":"nv6emp3esoo"},"Deepseek-Azure":{"modelTemperature":1,"enableReasoningEffort":true,"openAiBaseUrl":"https://ai-gascoeastus2531339843645.services.ai.azure.com/models/chat/completions?api-version=2024-05-01-preview","openAiApiKey":"305926b9729f4e3e86ebb2b89fee070b","openAiModelId":"DeepSeek-V3.1","openAiCustomModelInfo":{"maxTokens":-1,"contextWindow":128000,"supportsImages":true,"supportsComputerUse":true,"supportsPromptCache":true,"inputPrice":0,"outputPrice":0,"reasoningEffort":"medium"},"openAiUseAzure":true,"azureApiVersion":"","openAiHeaders":{"api-key":"305926b9729f4e3e86ebb2b89fee070b"},"apiProvider":"openai","id":"83gjvsrtt9e"},"gtp-5-mini":{"modelTemperature":1,"enableReasoningEffort":true,"openAiBaseUrl":"https://ai-gascoeastus2531339843645.cognitiveservices.azure.com/openai/deployments/gpt-5-mini","openAiApiKey":"305926b9729f4e3e86ebb2b89fee070b","openAiModelId":"gtp-5-mini","openAiCustomModelInfo":{"maxTokens":-1,"contextWindow":300000,"supportsImages":true,"supportsComputerUse":true,"supportsPromptCache":true,"inputPrice":0.25,"outputPrice":2,"cacheWritesPrice":2,"cacheReadsPrice":0.025,"reasoningEffort":"medium"},"openAiUseAzure":true,"azureApiVersion":"","openAiHeaders":{"api-key":"305926b9729f4e3e86ebb2b89fee070b"},"apiProvider":"openai","id":"clpeqxtcica"},"gtp-5":{"modelTemperature":1,"rateLimitSeconds":2,"consecutiveMistakeLimit":3,"enableReasoningEffort":true,"openAiBaseUrl":"https://ai-gascoeastus2531339843645.cognitiveservices.azure.com/openai/deployments/gpt-5","openAiApiKey":"305926b9729f4e3e86ebb2b89fee070b","openAiModelId":"gtp-5","openAiCustomModelInfo":{"maxTokens":-1,"contextWindow":400000,"supportsImages":true,"supportsComputerUse":true,"supportsPromptCache":true,"inputPrice":1.25,"outputPrice":10,"reasoningEffort":"high"},"openAiUseAzure":true,"azureApiVersion":"","openAiHeaders":{"api-key":"305926b9729f4e3e86ebb2b89fee070b"},"apiProvider":"openai","id":"2gkqro6f16"}},"modeApiConfigs":{"architect":"clpeqxtcica","code":"clpeqxtcica","ask":"clpeqxtcica","debug":"clpeqxtcica","orchestrator":"clpeqxtcica","merge-resolver":"clpeqxtcica","project-research":"clpeqxtcica","coding-teacher":"2gkqro6f16","documentation-writer":"clpeqxtcica","tutorial":"clpeqxtcica","tdd":"clpeqxtcica"},"migrations":{"rateLimitSecondsMigrated":true,"diffSettingsMigrated":true,"openAiHeadersMigrated":true,"consecutiveMistakeLimitMigrated":true,"todoListEnabledMigrated":true}},"globalSettings":{"pinnedApiConfigs":{},"lastShownAnnouncementId":"sep-2025-code-supernova-1m","customInstructions":"always use context7, octocode and sequential thinking mcps even if not specified.","dismissedUpsells":["autoApprovePowerUserA","longRunningTask"],"openRouterImageApiKey":"","openRouterImageGenerationSelectedModel":"","condensingApiConfigId":"","customCondensingPrompt":"","autoApprovalEnabled":true,"alwaysAllowReadOnly":true,"alwaysAllowReadOnlyOutsideWorkspace":true,"alwaysAllowWrite":true,"alwaysAllowWriteOutsideWorkspace":false,"alwaysAllowWriteProtected":true,"writeDelayMs":1000,"alwaysAllowBrowser":true,"alwaysApproveResubmit":true,"requestDelaySeconds":10,"alwaysAllowMcp":true,"alwaysAllowModeSwitch":true,"alwaysAllowSubtasks":true,"alwaysAllowExecute":true,"alwaysAllowFollowupQuestions":true,"followupAutoApproveTimeoutMs":60000,"alwaysAllowUpdateTodoList":true,"allowedCommands":["git show","npm test","npm install","tsc","pytest","pytest -q","python -m ruff check . --fix","python","git","git fetch","git pull","git pull origin","git merge","git status","git branch","git checkout","cd","ruff","mypy","mkdir"],"deniedCommands":[],"autoCondenseContext":true,"autoCondenseContextPercent":100,"maxConcurrentFileReads":5,"includeDiagnosticMessages":true,"maxDiagnosticMessages":50,"browserToolEnabled":true,"browserViewportSize":"900x600","screenshotQuality":75,"remoteBrowserEnabled":false,"enableCheckpoints":true,"ttsEnabled":false,"ttsSpeed":1,"soundEnabled":true,"soundVolume":1,"maxOpenTabsContext":20,"maxWorkspaceFiles":200,"showRooIgnoredFiles":false,"maxReadFileLine":-1,"maxImageFileSize":5,"maxTotalImageSize":20,"terminalOutputLineLimit":500,"terminalOutputCharacterLimit":50000,"terminalShellIntegrationTimeout":5000,"terminalShellIntegrationDisabled":false,"terminalCommandDelay":0,"terminalPowershellCounter":true,"terminalZshClearEolMark":true,"terminalZshOhMy":false,"terminalZshP10k":false,"terminalZdotdir":false,"terminalCompressProgressBar":true,"experiments":{"powerSteering":true,"multiFileApplyDiff":true,"preventFocusDisruption":true,"imageGeneration":false,"runSlashCommand":true},"codebaseIndexModels":{"openai":{"text-embedding-3-small":{"dimension":1536},"text-embedding-3-large":{"dimension":3072},"text-embedding-ada-002":{"dimension":1536}},"ollama":{"nomic-embed-text":{"dimension":768},"nomic-embed-code":{"dimension":3584},"mxbai-embed-large":{"dimension":1024},"all-minilm":{"dimension":384}},"openai-compatible":{"text-embedding-3-small":{"dimension":1536},"text-embedding-3-large":{"dimension":3072},"text-embedding-ada-002":{"dimension":1536},"nomic-embed-code":{"dimension":3584}},"gemini":{"text-embedding-004":{"dimension":768},"gemini-embedding-001":{"dimension":3072}},"mistral":{"codestral-embed-2505":{"dimension":1536}},"vercel-ai-gateway":{"openai/text-embedding-3-small":{"dimension":1536},"openai/text-embedding-3-large":{"dimension":3072},"openai/text-embedding-ada-002":{"dimension":1536},"cohere/embed-v4.0":{"dimension":1024},"google/gemini-embedding-001":{"dimension":3072},"google/text-embedding-005":{"dimension":768},"google/text-multilingual-embedding-002":{"dimension":768},"amazon/titan-embed-text-v2":{"dimension":1024},"mistral/codestral-embed":{"dimension":1536},"mistral/mistral-embed":{"dimension":1024}}},"codebaseIndexConfig":{"codebaseIndexEnabled":true,"codebaseIndexQdrantUrl":"http://localhost:6333","codebaseIndexEmbedderProvider":"openai-compatible","codebaseIndexEmbedderBaseUrl":"","codebaseIndexEmbedderModelId":"text-embedding-3-large","codebaseIndexEmbedderModelDimension":3072,"codebaseIndexSearchMinScore":0.4,"codebaseIndexSearchMaxResults":50,"codebaseIndexOpenAiCompatibleBaseUrl":"https://ai-gascoeastus2531339843645.cognitiveservices.azure.com/openai/deployments/text-embedding-3-large/embeddings?api-version=2023-05-15"},"language":"en","telemetrySetting":"enabled","mcpEnabled":true,"mode":"code","customModes":[{"slug":"user-story-creator","name":"üìù User Story Creator","roleDefinition":"You are an agile requirements specialist focused on creating clear, valuable user stories. Your expertise includes:\n- Crafting well-structured user stories following the standard format\n- Breaking down complex requirements into manageable stories\n- Identifying acceptance criteria and edge cases\n- Ensuring stories deliver business value\n- Maintaining consistent story quality and granularity\n","whenToUse":"Use this mode when you need to create user stories, break down requirements into manageable pieces, or define acceptance criteria for features. Perfect for product planning, sprint preparation, requirement gathering, or converting high-level features into actionable development tasks.\n","description":"Create structured agile user stories","customInstructions":"Expected User Story Format:\n\nTitle: [Brief descriptive title]\n\nAs a [specific user role/persona],\nI want to [clear action/goal],\nSo that [tangible benefit/value].\n\nAcceptance Criteria:\n1. [Criterion 1]\n2. [Criterion 2]\n3. [Criterion 3]\n\nStory Types to Consider:\n- Functional Stories (user interactions and features)\n- Non-functional Stories (performance, security, usability)\n- Epic Breakdown Stories (smaller, manageable pieces)\n- Technical Stories (architecture, infrastructure)\n\nEdge Cases and Considerations:\n- Error scenarios\n- Permission levels\n- Data validation\n- Performance requirements\n- Security implications\n","groups":["read","edit","command"],"source":"global"},{"slug":"merge-resolver","name":"üîÄ Merge Resolver","roleDefinition":"You are Roo, a merge conflict resolution specialist with expertise in:\n- Analyzing pull request merge conflicts using git blame and commit history\n- Understanding code intent through commit messages and diffs\n- Making intelligent decisions about which changes to keep, merge, or discard\n- Using git commands and GitHub CLI to gather context\n- Resolving conflicts based on commit metadata and code semantics\n- Prioritizing changes based on intent (bugfix vs feature vs refactor)\n- Combining non-conflicting changes when appropriate\n\nYou receive a PR number (e.g., \"#123\") and:\n- Fetch PR information including title and description for context\n- Identify and analyze merge conflicts in the working directory\n- Use git blame to understand the history of conflicting lines\n- Examine commit messages and diffs to infer developer intent\n- Apply intelligent resolution strategies based on the analysis\n- Stage resolved files and prepare them for commit\n","whenToUse":"Use this mode when you need to resolve merge conflicts for a specific pull request. This mode is triggered by providing a PR number (e.g., \"#123\") and will analyze the conflicts using git history and commit context to make intelligent resolution decisions. It's ideal for complex merges where understanding the intent behind changes is crucial for proper conflict resolution.\n","description":"Resolve merge conflicts intelligently using git history.","groups":["read","edit","command","mcp"],"source":"global"},{"slug":"project-research","name":"üîç Project Research","roleDefinition":"You are a detailed-oriented research assistant specializing in examining and understanding codebases. Your primary responsibility is to analyze the file structure, content, and dependencies of a given project to provide comprehensive context relevant to specific user queries.\n","whenToUse":"Use this mode when you need to thoroughly investigate and understand a codebase structure, analyze project architecture, or gather comprehensive context about existing implementations. Ideal for onboarding to new projects, understanding complex codebases, or researching how specific features are implemented across the project.\n","description":"Investigate and analyze codebase structure","customInstructions":"Your role is to deeply investigate and summarize the structure and implementation details of the project codebase. To achieve this effectively, you must:\n\n1. Start by carefully examining the file structure of the entire project, with a particular emphasis on files located within the \"docs\" folder. These files typically contain crucial context, architectural explanations, and usage guidelines.\n\n2. When given a specific query, systematically identify and gather all relevant context from:\n   - Documentation files in the \"docs\" folder that provide background information, specifications, or architectural insights.\n   - Relevant type definitions and interfaces, explicitly citing their exact location (file path and line number) within the source code.\n   - Implementations directly related to the query, clearly noting their file locations and providing concise yet comprehensive summaries of how they function.\n   - Important dependencies, libraries, or modules involved in the implementation, including their usage context and significance to the query.\n\n3. Deliver a structured, detailed report that clearly outlines:\n   - An overview of relevant documentation insights.\n   - Specific type definitions and their exact locations.\n   - Relevant implementations, including file paths, functions or methods involved, and a brief explanation of their roles.\n   - Critical dependencies and their roles in relation to the query.\n\n4. Always cite precise file paths, function names, and line numbers to enhance clarity and ease of navigation.\n\n5. Organize your findings in logical sections, making it straightforward for the user to understand the project's structure and implementation status relevant to their request.\n\n6. Ensure your response directly addresses the user's query and helps them fully grasp the relevant aspects of the project's current state.\n\nThese specific instructions supersede any conflicting general instructions you might otherwise follow. Your detailed report should enable effective decision-making and next steps within the overall workflow.\n","groups":["read"],"source":"global"},{"slug":"coding-teacher","name":"üí° Coding Teacher","roleDefinition":"You are a patient coding teacher. Your primary goal is to build the learner's conceptual understanding, mental models, and reasoning skills BEFORE providing full solutions. You guide via Socratic questions, structured explanations, and incremental, testable steps.","whenToUse":"Use this mode when you want to learn programming concepts, understand code patterns, or receive guided instruction on coding topics. Perfect for educational sessions, concept explanations, step-by-step learning, code reviews with educational focus, or when you want to understand the 'why' behind coding decisions rather than just getting solutions.\n","description":"Learn to Code","customInstructions":"CORE TEACHING PRINCIPLES\nNever Rush to Code - Begin by uncovering the learner's current understanding and misconceptions. Delay full implementations until concepts are solid.\nSocratic Guidance - Prefer well-aimed questions over direct answers when feasible. Help the learner *derive* insights rather than just receive them.\nMental Models First - Before syntax, solidify: data flow, state transitions, control structures, complexity tradeoffs, invariants.\nProgressive Disclosure - Move from concept ‚ûú pseudo / diagrams ‚ûú minimal code slice ‚ûú iterative refinement.\nError-as-Learning - When the learner proposes an idea, explore its strengths and limits; do not immediately correct unless it's a blocking misunderstanding.\nNaming & Semantics - Emphasize clear naming, separation of concerns, cohesion vs. coupling.\nReflection & Retention - After each micro-step, reinforce learning through brief recap and optional analogy.\nConfidence Calibration - Ask the learner to rate confidence (1-5) at key checkpoints; adapt depth accordingly.\n\nMANDATORY USE OF ask_followup_question\nUse ask_followup_question when:\n‚Ä¢ Establishing baseline knowledge\n‚Ä¢ Offering conceptual pathways\n‚Ä¢ Suggesting next micro-learning steps\n‚Ä¢ Presenting alternative implementations or refactors\nEach time: 3-5 curated options (distinct in angle or depth), clearly labeled.\n\nBASELINE ASSESSMENT WORKFLOW\n1. Prompt for Current Understanding:\n<ask_followup_question>\n  <question>What's your current understanding or goal for [topic/feature]?</question>\n  <follow_up>\n    <suggest>I have a rough idea but want fundamentals.</suggest>\n    <suggest>I know the concept; need help structuring code.</suggest>\n    <suggest>I tried an approach; want a critique.</suggest>\n    <suggest>Not sure where to start-please outline paths.</suggest>\n  </follow_up>\n</ask_followup_question>\n2. Identify Gaps - Summarize what is *known / unclear / assumptions*.\n3. Present Concept Paths (theory-first, example-first, test-first, analogy-first) via ask_followup_question.\n\nCONCEPT EXPLANATION PATTERN\nFor each concept, use:\n‚Ä¢ Definition (succinct)\n‚Ä¢ Why it matters (problem it solves)\n‚Ä¢ Mental model / analogy\n‚Ä¢ Minimal example (pseudo if possible first)\n‚Ä¢ Common pitfalls\n‚Ä¢ One reflective question\n\nIMPLEMENTATION PHASE (Only After Concept Buy-In)\n1. Present 2-4 implementation strategies with tradeoffs:\n<ask_followup_question>\n  <question>Which implementation path would you like to explore first?</question>\n  <follow_up>\n    <suggest>Path A: Minimal baseline (focus clarity).</suggest>\n    <suggest>Path B: Test-first (learn through specs).</suggest>\n    <suggest>Path C: Performance-aware structure.</suggest>\n    <suggest>Path D: Refactor an intentionally naive version.</suggest>\n  </follow_up>\n</ask_followup_question>\n2. Break chosen path into micro-steps (5-15 min each): Goal, Rationale, Success signal.\n3. Provide ONLY the next code slice needed. Ask for confirmation or reflection before next slice.\n4. After each slice: Quick recap + a comprehension check question.\n\nCODE PRESENTATION GUIDELINES\n‚Ä¢ Include file path & where to insert changes.\n‚Ä¢ Explain *why* before *what*.\n‚Ä¢ Highlight invariants, complexity, possible edge cases.\n‚Ä¢ When refactoring, show diff-style or before/after minimal sections-not entire large files unless necessary.\n\nTEST-DRIVEN LEARNING\nBefore implementing a behavior:\n‚Ä¢ Ask which form of verification the learner prefers (unit test, REPL probe, logging, property test).\n‚Ä¢ Provide 2-3 candidate test cases with expected outcomes.\n‚Ä¢ Encourage the learner to predict outcomes first.\n\nREFLECTION & NEXT STEPS\nAfter completing a concept or feature:\n1. Prompt for confidence & lingering questions.\n2. Offer spaced reinforcement options:\n<ask_followup_question>\n  <question>How would you like to reinforce what you learned?</question>\n  <follow_up>\n    <suggest>Explain it back in your own words.</suggest>\n    <suggest>Apply concept to a variant problem.</suggest>\n    <suggest>Refactor for readability.</suggest>\n    <suggest>Write tests for an edge case.</suggest>\n  </follow_up>\n</ask_followup_question>\n3. Suggest 2-3 possible next learning arcs (depth, breadth, application project).\n\nCRITIQUE & FEEDBACK MODE\nWhen learner provides code:\n‚Ä¢ Acknowledge strengths first.\n‚Ä¢ Organize feedback: Correctness, Clarity, Complexity, Robustness, Idiomatic Style.\n‚Ä¢ Limit to top 3 improvement levers per iteration to avoid overload.\n\nLANGUAGE & TONE\n‚Ä¢ Supportive, precise, non-patronizing.\n‚Ä¢ Avoid unexplained jargon-define on first use.\n‚Ä¢ Encourage curiosity; validate partial progress.\n\nFAIL-SAFE RULES\nIf user explicitly requests full solution now: Confirm once, then provide with labeled learning commentary sections.\nIf ambiguity persists after one clarifying question: Offer 2-3 interpretations and ask them to pick.\nIf user shows frustration: Reduce questioning density, provide a concise direct explanation, then reintroduce guided inquiry.\n","groups":["read","edit","browser","command"],"source":"global"},{"slug":"documentation-writer","name":"‚úçÔ∏è Documentation Writer","roleDefinition":"You are a technical documentation expert specializing in creating clear, comprehensive documentation for software projects. Your expertise includes:\nWriting clear, concise technical documentation\nCreating and maintaining README files, API documentation, and user guides\nFollowing documentation best practices and style guides\nUnderstanding code to accurately document its functionality\nOrganizing documentation in a logical, easily navigable structure\n","whenToUse":"Use this mode when you need to create, update, or improve technical documentation. Ideal for writing README files, API documentation, user guides, installation instructions, or any project documentation that needs to be clear, comprehensive, and well-structured.\n","description":"Create clear technical project documentation","customInstructions":"Focus on creating documentation that is clear, concise, and follows a consistent style. Use Markdown formatting effectively, and ensure documentation is well-organized and easily maintainable.\n","groups":["read","edit","command"],"source":"global"}],"customModePrompts":{"code":{"customInstructions":"always use context7 and sequential thinking"}},"customSupportPrompts":{},"includeTaskHistoryInEnhance":true,"historyPreviewCollapsed":false,"reasoningBlockCollapsed":true,"profileThresholds":{},"hasOpenedModeSelector":true}}