{
  "id": "snapshot_1759024073000_i992xfsbw",
  "approvalId": "approval_1759024072982_17o3ht86w",
  "approvalTitle": "Phase1 Data Contracts Pack — Design Approval",
  "version": 1,
  "timestamp": "2025-09-28T01:47:53.000Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design — hmlv-data-contracts\n\nPurpose\n- Record Phase 1 (Data Contracts Pack) completion, link artifacts, and define minimal technical design for validation/mapping. No approvals requested per current instruction.\n\nSources\n- [`hmlv_manufacturing_simulator_prd_v_0.md`](hmlv_manufacturing_simulator_prd_v_0.md:1)\n- [`implementation_plan_2025-09-27T18-06-45Z.md`](implementation_plan_2025-09-27T18-06-45Z.md:1)\n- [`agent_instructions/INSTRUCTION-2.md`](agent_instructions/INSTRUCTION-2.md:1)\n\nArtifacts (produced)\n- JSON Schema: [`schemas/project_config.schema.json`](schemas/project_config.schema.json:1)\n- CSV templates:\n  - [`examples/toy/products.csv`](examples/toy/products.csv:1)\n  - [`examples/toy/routings.csv`](examples/toy/routings.csv:1)\n  - [`examples/toy/machines.csv`](examples/toy/machines.csv:1)\n  - [`examples/toy/operators.csv`](examples/toy/operators.csv:1)\n  - [`examples/toy/setup_matrix.csv`](examples/toy/setup_matrix.csv:1)\n  - [`examples/toy/demand.csv`](examples/toy/demand.csv:1)\n  - [`examples/toy/calendars.csv`](examples/toy/calendars.csv:1)\n  - [`examples/toy/mtbf_mttr.csv`](examples/toy/mtbf_mttr.csv:1)\n  - [`examples/toy/yields.csv`](examples/toy/yields.csv:1)\n  - [`examples/toy/skills.csv`](examples/toy/skills.csv:1)\n- Negative dataset: [`examples/toy/negative/products_invalid.csv`](examples/toy/negative/products_invalid.csv:1)\n- Validation pipeline functions: [`engine.run.validate_project_config()`](engine/run.py:173), [`engine.run.validate_csv_documents()`](engine/run.py:209), [`engine.run.map_csvs_to_project()`](engine/run.py:252)\n- Validation runner: [`tools/validate_toys.py`](tools/validate_toys.py:1)\n- Validation output: [`.artifacts/validation/validation_report.json`](.artifacts/validation/validation_report.json:1)\n\nDesign Summary (KISS / YAGNI)\n- Single authoritative JSON Schema validates shape and numeric constraints; referential integrity deferred to simple Python checks later (clear errors).\n- Minimal row/column diagnostics format for CSV: `file:{name},row:{row},column:{column},message:{text}`.\n- Deterministic, side‑effect‑free validators and mappers; no external services in Phase 1.\n\nSchema Design\n- Top‑level keys enforced: plant, products[], routings[], machines[], operators[], setup_matrix[], demand[], calendars[], mtbf_mttr[], yields[], skills[]. See [`schemas/project_config.schema.json`](schemas/project_config.schema.json:1).\n- Numeric constraints:\n  - process_time_mean > 0; process_time_sigma ≥ 0.\n  - setup_time ≥ 0.\n  - yield_rate ∈ (0,1].\n  - capacity ≥ 1.\n  - demand.quantity ≥ 1.\n- Enums:\n  - DispatchRule ∈ {EDD, SPT, ATC, ATCS, LSN}.\n  - ReleasePolicy ∈ {CONWIP, POLCA}.\n- Timezones: IANA strings for plant/calendars.\n\nValidation Pipeline (Phase 1)\n- JSON Schema Validation\n  - Implementation: [`engine.run.validate_project_config()`](engine/run.py:173)\n  - Uses Draft7Validator; errors collected via `iter_errors` and formatted using `error.path` and `error.message`.\n  - Output emits `file:project_config.json,row:<n/a>,column:{json_path},message:{text}`.\n- CSV Validation\n  - Implementation: [`engine.run.validate_csv_documents()`](engine/run.py:209)\n  - Checks per file:\n    - products: process_time_mean present and > 0.\n    - setup_matrix: setup_time present and ≥ 0.\n    - yields: yield_rate in (0,1].\n  - Rows numbered as DictReader rows (header=1, data starts=2).\n- Mapping\n  - Implementation: [`engine.run.map_csvs_to_project()`](engine/run.py:252)\n  - Naive mapping of parsed CSV documents into ProjectConfig skeleton.\n\nRunner & Artifacts\n- [`tools/validate_toys.py`](tools/validate_toys.py:1) loads CSVs, runs CSV + schema validation, writes report to [`.artifacts/validation/validation_report.json`](.artifacts/validation/validation_report.json:1).\n- Deterministic execution; no external dependencies beyond local files.\n\nContext7 Guidance (jsonschema best practices)\n- Use `Draft7Validator.iter_errors(instance)` and sort by `error.path` for stable output. Format paths via `list(error.path)` or `error.json_path` when available. Reference: python-jsonschema docs.\n- Access `error.message` for human‑readable text; consider `ErrorTree` to group nested errors when introducing `anyOf/allOf` in later phases.\n- Use `FormatChecker` for date‑time fields (e.g., demand.due_date). Proposal for Phase 2: enable `date-time` format checking with appropriate checker (Draft202012 or add checker for Draft7).\n\nOctocode Exemplar Notes (patterns in OSS repos)\n- Many pipelines model a `ValidationReport`/`ValidationIssue` dataclass with structured fields (file, row, column, message, severity). Phase 2 delta: introduce a typed `ValidationIssue` list instead of plain strings while keeping the same visible format for UI.\n- Common practice sorts errors by path and groups by file; we will adopt this in Phase 2 when referential integrity checks are added.\n\nPhase 2 Deltas (planned)\n- Referential integrity:\n  - Validate that IDs referenced across arrays exist (e.g., routings.product_id ∈ products, skills.operator_id ∈ operators).\n  - Emit errors with concrete row and pointer (JSON path or CSV column).\n- Format checking:\n  - Enable `date-time` and `timezone` validation via `FormatChecker` and a whitelist for IANA zones.\n- Error model:\n  - Introduce `ValidationIssue` dataclass (file, row, column, message, severity) and aggregate into `ValidationReport`.\n- Reporting:\n  - Sort errors by (file, row, column); optionally emit `json_path` alongside column for schema validations.\n\nNon‑Goals (Phase 1)\n- Remote `$ref` resolution.\n- DB‑level JSONB constraints (Postgres).\n- Full calendar overlap detection.\n\nTraceability to Implementation Plan & PRD\n- Contracts referenced in Implementation Plan (engine.run/validate, map) are implemented: [`engine.run.validate_project_config()`](engine/run.py:173), [`engine.run.map_csvs_to_project()`](engine/run.py:252).\n- PRD scope for data ingest and validation is satisfied with minimal, actionable diagnostics and toy datasets.\n\nStatus\n- Phase 1 (Data Contracts Pack) completed and recorded; this design.md links artifacts and defines next deltas for Phase 2.",
  "fileStats": {
    "size": 6121,
    "lines": 97,
    "lastModified": "2025-09-27T23:55:00.703Z"
  },
  "comments": []
}